buildscript {
    def buildGutenbergMobileJSBundle =
            System.getenv('SUPPRESS_GUTENBERG_MOBILE_JS_BUNDLE_BUILD').asBoolean()
            ? false : (rootProject.ext.has("buildGutenbergMobileJSBundle")
                    && rootProject.ext.buildGutenbergMobileJSBundle)

    ext.kotlinVersion = '1.3.61'

    repositories {
        jcenter()
        google()

        if (buildGutenbergMobileJSBundle) {
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.android.tools.build:gradle:3.4.2'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'

        if (buildGutenbergMobileJSBundle) {
            classpath "com.moowork.gradle:gradle-node-plugin:1.3.1"
        }
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'kotlin-android'

def buildGutenbergMobileJSBundle =
        System.getenv('SUPPRESS_GUTENBERG_MOBILE_JS_BUNDLE_BUILD').asBoolean()
        ? false : (rootProject.ext.has("buildGutenbergMobileJSBundle")
                && rootProject.ext.buildGutenbergMobileJSBundle)

def tempFolder = "${System.getenv('TMPDIR')}/jsbundle/${System.getenv('VERSION')}"
def nodeFolder = file("${tempFolder}/nodejs")
def npmFolder = file("${tempFolder}/npm")

if (buildGutenbergMobileJSBundle) {
    println 'Building the Gutenberg Mobile JS bundle'

    apply plugin: 'com.moowork.node'

    node {
        // Version of node to use.
        version = '12.18.1'

        // Version of npm to use.
        npmVersion = '6.14.5'

        // Base URL for fetching node distributions (change if you have a mirror).
        distBaseUrl = 'https://nodejs.org/dist'

        // If true, it will download node using above parameters.
        // If false, it will try to use globally installed node.
        download = true

        // Set the work directory for unpacking node
        workDir = file(nodeFolder)

        // Set the work directory for NPM
        npmWorkDir = file(npmFolder)

        // Set the work directory where node_modules should be located
        nodeModulesDir = file("${project.projectDir}/../../../../")
    }

    npm_install {
        args = ['--prefer-offline']
    }
}

// import the `readReactNativeVersion()` function
apply from: 'https://gist.githubusercontent.com/hypest/742448b9588b3a0aa580a5e80ae95bdf/raw/8eb62d40ee7a5104d2fcaeff21ce6f29bd93b054/readReactNativeVersion.gradle'

// import the `readHashedVersion()` function
apply from: 'https://gist.githubusercontent.com/hypest/ceaf20a8e7d9b8404e4a5ff2e6c36650/raw/e1460a128e4b9863963410d719c7d44c3adefd02/readHashedVersion.gradle'

// import the `waitJitpack()` function
apply from: 'https://gist.githubusercontent.com/hypest/f526fe0775dedce0ce0133f1400d22a4/raw/0008b271a0d28fc79957fd3c2a027f57e98f796a/wait-jitpack.gradle'

group='com.github.wordpress-mobile.gutenberg-mobile'

// fallback flag value for when lib is compiled individually (e.g. via jitpack)
project.ext.buildGutenbergFromSource = false

def hermesOriginalPath = "../../../node_modules/hermes-engine/android/";
def hermesPath = hermesOriginalPath;
def buildResFolder = 'build/generated/res'
def buildResGutenbergFolder = "${buildResFolder}/gutenberg"
def buildResRawFolder = "${buildResGutenbergFolder}/raw"
def bundleName = 'index_android_bundle'
def mobileGutenbergRootDir = '../../../..'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }
    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            res.srcDirs += [buildResGutenbergFolder]
        }
    }
}

repositories {
    google()
    jcenter()

    maven { url "https://jitpack.io" }

    if (rootProject.ext.buildGutenbergFromSource) {
        // If building from source, use the local sources from node_modules
        def nodeModulesPath = "${project.buildDir}/../../../node_modules/"
        maven { url "${nodeModulesPath}/react-native/android" }
    } else {
        // If not building from source (e.g. Jitpack), use the bintray repo so a local RN setup is not needed
        def reactNativeRepo = 'https://dl.bintray.com/wordpress-mobile/react-native-mirror/'
        println "Will use the RN maven repo at ${reactNativeRepo}"
        maven { url reactNativeRepo }
    }
}

dependencies {
    implementation project(':@wordpress_react-native-aztec')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    implementation "org.wordpress:utils:1.22"

    // For animated GIF support
    implementation 'com.facebook.fresco:animated-gif:2.0.0'

    implementation 'com.google.android.material:material:1.1.0'

    if (rootProject.ext.buildGutenbergFromSource) {
        println "using gutenberg from source"
        implementation project(':react-native-linear-gradient')
        implementation project(':react-native-svg')
        implementation project(':react-native-video')
        implementation project(':@react-native-community_slider')
        implementation project(':react-native-get-random-values')

        implementation 'com.facebook.react:react-native:+'
    } else {
        hermesPath = "./vendor/hermes-engine/";

        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-svg', readHashedVersion('../../react-native-editor/package.json', 'react-native-svg', 'dependencies')))
        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-video', readHashedVersion('../../react-native-editor/package.json', 'react-native-video', 'dependencies')))
        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-linear-gradient', readHashedVersion('../../react-native-editor/package.json', 'react-native-linear-gradient', 'dependencies')))
        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-slider', readHashedVersion('../../react-native-editor/package.json', '@react-native-community/slider', 'dependencies')))
        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-get-random-values', readHashedVersion('../../react-native-editor/package.json', 'react-native-get-random-values', 'dependencies')))

        // FIXME Temporary fix to get Jitpack builds to green while I work on a solution without hardcoded values.
        //def rnVersion = readReactNativeVersion('../package.json', 'peerDependencies')
        def rnVersion = '0.61.5'
        implementation "com.facebook.react:react-native:${rnVersion}"
    }

    debugImplementation files(hermesPath + "hermes-debug.aar")
    releaseImplementation files(hermesPath + "hermes-release.aar")
}

if (buildGutenbergMobileJSBundle) {
    def nodeModulesFolders = ["$mobileGutenbergRootDir/node_modules", "$mobileGutenbergRootDir/gutenberg/node_modules"] as String[]

    task npmRunBundleAndroid(type: NpmTask) {
        def outputFolder = file("$buildResRawFolder").absolutePath
        args = ['run', 'bundle:android-gradle', "--bundle_output=$outputFolder/$bundleName"]
    }

    task buildJSBundle {
        def dirs = [mobileGutenbergRootDir]
        def bundlePath = file("$mobileGutenbergRootDir/bundle").absolutePath
        file(mobileGutenbergRootDir).eachDirRecurse { dir ->
            def isRelevantDir = !['react-native-bridge/android/build/intermediates',
                                  'react-native-editor/android/app/build/intermediates',
                                  bundlePath,
                                  'node_modules'].any { dir.absolutePath.contains(it) } &&
                    !dir.name.startsWith('symlinked')
            if (isRelevantDir) {
                dirs << dir
            }
        }

        def isRelevantFile = { it.name.endsWithAny('.js', '.css', '.scss') || it.name == 'package.json' }
        def inputFiles = []
        def projectRootAsPath = project.rootDir.toPath()
        dirs.forEach { dir ->
            file(dir).eachFile {
                if (isRelevantFile(it)) {
                    def inputFile = projectRootAsPath.relativize(it.toPath()).toFile()
                    inputFiles << inputFile
                    println inputFile.toString()
                }
            }
        }

        inputs.files(inputFiles).withPathSensitivity(PathSensitivity.RELATIVE)

        def origWithPath = "$buildResRawFolder/$bundleName"

        outputs.file(origWithPath)
        outputs.cacheIf { true }

        doLast {
            println "Deleting extracted RN tools and node_modules"
            project.delete(nodeFolder, npmFolder, nodeModulesFolders)

            println "Setting up Node"
            nodeSetup.exec()

            println "Setting up npm"
            npmSetup.exec()

            println "Running npm install"
            npm_install.exec()

            println "Building gb-mobile JS bundle"
            npmRunBundleAndroid.exec()

            println "Done buildJSBundle!"
        }
    }

    task backupHermesDebugAAR(type: Copy) {
        def origFileName = 'hermes-debug.aar'
        def origWithPath = hermesOriginalPath + origFileName
        from origWithPath
        into hermesPath
        doLast {
            println "Done backing up Hermes debug AARs"
        }
    }

    task backupHermesReleaseAAR(type: Copy) {
        def origFileName = 'hermes-release.aar'
        def origWithPath = hermesOriginalPath + origFileName
        from origWithPath
        into hermesPath
        doLast {
            println "Done backing up Hermes release AARs"
        }
    }

    clean {
        doFirst {
            println "Executing extended clean task that also deletes node_modules folders"
        }
        delete nodeModulesFolders
    }

    def bundleResFiles = project.files(buildResFolder)
    bundleResFiles.builtBy(buildJSBundle)

    android.libraryVariants.all { variant ->
        variant.preBuildProvider.configure { dependsOn(buildJSBundle) }
        variant.mergeResourcesProvider.configure { dependsOn(buildJSBundle) }
        variant.registerGeneratedResFolders(bundleResFiles)
    }
}
